        public void GetAdityaBirlaTokengeneration()
        {
            try
            {
                string ABFLtokenurl = _config.GetValue<string>("ABFL:ABFLtokenurl") ?? string.Empty;
                string ABFLBillerID = _config.GetValue<string>("ABFL:ABFLBillerID") ?? string.Empty;
                string ABFLUsername = _config.GetValue<string>("ABFL:ABFLUsername") ?? string.Empty;
                string ABFLPassword = _config.GetValue<string>("ABFL:ABFLPassword") ?? string.Empty;
                string ABFLKey = _config.GetValue<string>("ABFL:ABFLKey") ?? string.Empty;
                int ABFLCommandTimeout = _config.GetValue<int>("ABFL:ABFLCommandTimeout");
                string s1 = "";
                HttpWebRequest? request = HttpWebRequest.Create(ABFLtokenurl)
                            as HttpWebRequest;


                Log.Information("Aditya Birla Request URL : " + ABFLtokenurl, "Info");



#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                request.Method = "POST";

                request.Headers.Add("Authorization", "Basic " + ABFLKey);
                request.ContentType = "application/x-www-form-urlencoded";
                request.MediaType = "application/json";
                request.Timeout = ABFLCommandTimeout;

                string RefreshToken = _TokenBL.FetchRefreshToken(ABFLBillerID, ref CommandTimeout, ref _conStr);

                StringBuilder s = new StringBuilder();
                s.Append("grant_type=password");
                s.Append("&");
                s.Append("password=" + ABFLPassword);
                s.Append("&");
                s.Append("username=" + ABFLUsername);


                Log.Information("Aditya Birla Token Request :" + s.ToString(), "Info");


                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())

                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
               Log.Information("Aditya Birla Token Response :" + s1, "Info");

                JObject jObject = JObject.Parse(s1);

                string? access_token = Convert.ToString(jObject["access_token"]) ?? string.Empty;
                string? refresh_token = Convert.ToString(jObject["refresh_token"]) ?? string.Empty;


               Log.Information("Aditya Birla access_token Response :" + access_token + Environment.NewLine + " refresh_token : " + refresh_token, "Info");

                _TokenBL.InsertToken(ABFLBillerID, access_token, "", refresh_token, CommandTimeout, _conStr);

               Log.Information("Aditya Birla Token Generation End ", "Info");

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
               Log.Information("Error Response: " + ex, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                Log.Error("GetAdityaBirlaTokengeneration Exception: " + Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());

               Log.Information("Aditya Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error("GetAdityaBirlaTokengeneration Exception: " + Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());

            }
        }
        public void GetHDBFinanceToken()
        {
            try
            {
                string HDBFinancetokenurl = _config.GetValue<string>("HDBFinance:HDBFinancetokenurl") ?? string.Empty;
                string HDBFinanceusername = _config.GetValue<string>("HDBFinance:HDBFinanceusername") ?? string.Empty;
                string HDBFinancepassword = _config.GetValue<string>("HDBFinance:HDBFinancepassword") ?? string.Empty;
                string HDBFinanceBillerID = _config.GetValue<string>("HDBFinance:HDBFinanceBillerID") ?? string.Empty;


                HttpWebRequest? request = HttpWebRequest.Create(HDBFinancetokenurl)
                            as HttpWebRequest;


               Log.Information("HDB Finance Token Request URL :" + HDBFinancetokenurl.ToString(), "Info");


                string authInfo = HDBFinanceusername + ":" + HDBFinancepassword;
#pragma warning disable CS8602 // Dereference of a possibly null reference.
               Log.Information("HDB Finance Token HDBFinanceusername :" + HDBFinanceusername.ToString() + " HDBFinancepassword: " + HDBFinancepassword, "Info");
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                authInfo = Convert.ToBase64String(Encoding.Default.GetBytes(authInfo));

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Headers.Add("Authorization", "Basic " + authInfo);
#pragma warning restore CS8602 // Dereference of a possibly null reference.

               Log.Information("HDB Finance Token Request :" + authInfo.ToString(), "Info");

                request.Method = "POST";
                request.ContentType = "application/json";
                request.Proxy = WebRequest.DefaultWebProxy;
                request.PreAuthenticate = true;
                request.Credentials = CredentialCache.DefaultCredentials;
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.


                byte[] fulldata = Encoding.Default.GetBytes(authInfo.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                HttpWebResponse response = request.GetResponse() as HttpWebResponse;
                string s1 = "";
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                {
                    s1 = sr.ReadToEnd();
                }
#pragma warning restore CS8602 // Dereference of a possibly null reference.

               Log.Information("HDB Finance Token Response :" + s1.ToString(), "Info");

                JObject jObject = JObject.Parse(s1);


                string? asw = Convert.ToString(jObject["AuthToken"]);
               Log.Information("HDBFinance Token Response :" + asw, "Info");

                _TokenBL.InsertToken(HDBFinanceBillerID, asw, "", "", CommandTimeout, _conStr);
                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("HDB Finance Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());

            }
        }
        public void GetNupayCrissFinancialToken()
        {
            try
            {

                string NupayCrissFinancialtokenurl = _config.GetValue<string>("NupayCrissFinancial:NupayCrissFinancialtokenurl") ?? string.Empty;
                string NupayCrissFinancialBillerID = _config.GetValue<string>("NupayCrissFinancial:NupayCrissFinancialBillerID") ?? string.Empty;
                string NupayCrissFinancialKey = _config.GetValue<string>("NupayCrissFinancial:NupayCrissFinancialKey") ?? string.Empty;



                HttpWebRequest? request = HttpWebRequest.Create(NupayCrissFinancialtokenurl)
                            as HttpWebRequest;

                string strTokenResponse = string.Empty;
               Log.Information("Nupay CrissFinantial  Request URL :" + NupayCrissFinancialtokenurl, "Info");


#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "GET";
                request.Headers.Add("api-key", NupayCrissFinancialKey);
                request.ContentType = "application/x-www-form-urlencoded";
                request.MediaType = "application/json";


                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (Stream stream = response.GetResponseStream())
                    using (StreamReader reader = new StreamReader(stream))
                    {
                        strTokenResponse = reader.ReadToEnd();
                    }
                }
               Log.Information("Nupay CrissFinantial  Token Response :" + strTokenResponse, "Info");


                JObject jObject = JObject.Parse(strTokenResponse);

                string? token = Convert.ToString(jObject["token"]);


               Log.Information("Nupay CrissFinantial  access_token Response :" + token, "Info");


                _TokenBL.InsertToken(NupayCrissFinancialBillerID, token, "", "", CommandTimeout, _conStr);

               Log.Information("Nupay CrissFinantial  Token Generation End ", "Info");

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
               Log.Information("Error Response: " + ex, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("Nupay CrissFinantial Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());

            }
        }
        public void GetIndusFastTagToken()
        {

            string indusfasttagtokenurl = _config.GetValue<string>("IndusindFastTag:indusfasttagtokenurl") ?? string.Empty;
            string indusfasttagoauth_consumer_key = _config.GetValue<string>("IndusindFastTag:indusfasttagoauth_consumer_key") ?? string.Empty;
            string indusfasttagoauth_signature_method = _config.GetValue<string>("IndusindFastTag:indusfasttagoauth_signature_method") ?? string.Empty;
            string indusfasttagoauth_nonce = _config.GetValue<string>("IndusindFastTag:indusfasttagoauth_nonce") ?? string.Empty;
            string indusfasttagoauth_version = _config.GetValue<string>("IndusindFastTag:indusfasttagoauth_version") ?? string.Empty;
            string fasttagoauth_signature = _config.GetValue<string>("IndusindFastTag:indusfasttagoauth_signature") ?? string.Empty;
            string indusfasttagBillerID = _config.GetValue<string>("IndusindFastTag:indusfasttagBillerID") ?? string.Empty;
            string indusfasttagEncrypDecryptkey = _config.GetValue<string>("IndusindFastTag:indusfasttagEncrypDecryptkey") ?? string.Empty;
            int IndusFastTagCommandTimeout = _config.GetValue<int>("IndusindFastTag:IndusFastTagCommandTimeout");
            string indusfasttagoauth_signature = _config.GetValue<string>("IndusindFastTag:indusfasttagoauth_signature") ?? string.Empty;


           Log.Information("Indus FastTag Request Starts -   Request URL :" + indusfasttagtokenurl, "Info");

            string strProcessResponse = string.Empty;
            string timestamp = string.Empty;
            string decryptedResponse = string.Empty;
            HttpWebRequest HttpWebRequest;
            HttpWebResponse HttpWebResponse;
            try
            {
                Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
                timestamp = Convert.ToString(unixTimestamp);

                HttpWebRequest = (HttpWebRequest)WebRequest.Create(indusfasttagtokenurl);
                HttpWebRequest.Method = "GET";

                OAuthBase.SignatureTypes signatureType = OAuthBase.SignatureTypes.HMACSHA256;
                OAuthBase myOAuth = new OAuthBase();
                string normalizedUrl;
                string normalizedRequestParameters;
                Uri uri = new Uri(indusfasttagtokenurl);
                string consumerKey = indusfasttagoauth_consumer_key;
                string consumerSecret = indusfasttagoauth_signature;
                string httpMethod = "GET";
                string timeStamp = timestamp;
                string nonce = indusfasttagoauth_nonce;

                if (string.IsNullOrEmpty(timeStamp))
                {
                    timeStamp = myOAuth.GenerateTimeStamp();
                }

                if (string.IsNullOrEmpty(nonce))
                {
                    nonce = myOAuth.GenerateNonce();
                }


                myOAuth.IncludeVersion = true;

                string signature = myOAuth.GenerateSignature(uri, consumerKey, consumerSecret,
                    "", "", httpMethod, timeStamp, nonce, signatureType,
                    out normalizedUrl, out normalizedRequestParameters);

                string signatureString = myOAuth.UrlEncode(signature);
                //////////////////////////////////////////////////////////////////////////////////////////////////////////


                HttpWebRequest.Headers.Add("Authorization", "OAuth oauth_consumer_key=\"" + indusfasttagoauth_consumer_key + "\",oauth_signature_method=\"" + indusfasttagoauth_signature_method + "\",oauth_timestamp=\"" + timestamp + "\",oauth_nonce=\"" + indusfasttagoauth_nonce + "\",oauth_version=\"" + indusfasttagoauth_version + "\",oauth_signature=\"" + signatureString + "\"");
                HttpWebRequest.ContentType = "application/json";
                HttpWebRequest.Timeout = IndusFastTagCommandTimeout;

                using (HttpWebResponse = (HttpWebResponse)HttpWebRequest.GetResponse())
                {
                   Log.Information("IndusFastTag Request Headers :" + HttpWebRequest.Headers.ToString(), "Info");
                    using (var reader = new System.IO.StreamReader(HttpWebResponse.GetResponseStream()))
                    {
                        strProcessResponse = reader.ReadToEnd();
                    }
                }
               Log.Information("IndusFastTag Json Response Encrypted :" + strProcessResponse, "Info");

                JObject jObject = JObject.Parse(strProcessResponse);
                string? asw = Convert.ToString(jObject["ResponseData"]);
                decryptedResponse = AesDecrypt.AES_DECRYPT(asw, indusfasttagEncrypDecryptkey);

               Log.Information("IndusFastTag Decrypted Response :" + decryptedResponse, "Info");

                JObject jObject1 = JObject.Parse(decryptedResponse);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string token = jObject1["ResponseContent"]["Token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("IndusFastTag Token :" + token, "Info");

#pragma warning disable CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string tokenSecret = jObject1["ResponseContent"]["TokenSecret"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("IndusFastTag TokenSecret :" + tokenSecret, "Info");

                _TokenBL.InsertToken(indusfasttagBillerID, token, tokenSecret, "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("IndusFastTag Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "IndusFastTag Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetFastTagToken()
        {

            string fasttagtokenurl = _config.GetValue<string>("FastTag:fasttagtokenurl") ?? string.Empty;
            string fasttagoauth_consumer_key = _config.GetValue<string>("FastTag:fasttagoauth_consumer_key") ?? string.Empty;
            string fasttagoauth_signature_method = _config.GetValue<string>("FastTag:fasttagoauth_signature_method") ?? string.Empty;
            string fasttagoauth_nonce = _config.GetValue<string>("FastTag:fasttagoauth_nonce") ?? string.Empty;
            string fasttagoauth_version = _config.GetValue<string>("FastTag:fasttagoauth_version") ?? string.Empty;
            string fasttagoauth_signature = _config.GetValue<string>("FastTag:fasttagoauth_signature") ?? string.Empty;
            string fasttagBillerID = _config.GetValue<string>("FastTag:fasttagBillerID") ?? string.Empty;
            string fasttagEncrypDecryptkey = _config.GetValue<string>("FastTag:fasttagEncrypDecryptkey") ?? string.Empty;
            int FastTagCommandTimeout = _config.GetValue<int>("FastTag:FastTagCommandTimeout");

           Log.Information("FastTag Request Starts -   Request URL :" + fasttagtokenurl, "Info");

            string strProcessResponse = string.Empty;
            string timestamp = string.Empty;
            string decryptedResponse = string.Empty;
            HttpWebRequest HttpWebRequest;
            HttpWebResponse HttpWebResponse;
            try
            {
                Int32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
                timestamp = Convert.ToString(unixTimestamp);

                HttpWebRequest = (HttpWebRequest)WebRequest.Create(fasttagtokenurl);
                HttpWebRequest.Method = "GET";

                OAuthBase.SignatureTypes signatureType = OAuthBase.SignatureTypes.HMACSHA256;
                OAuthBase myOAuth = new OAuthBase();
                string normalizedUrl;
                string normalizedRequestParameters;
                Uri uri = new Uri(fasttagtokenurl);
                string consumerKey = fasttagoauth_consumer_key;
                string consumerSecret = fasttagoauth_signature;
                string httpMethod = "GET";
                string timeStamp = timestamp;
                string nonce = fasttagoauth_nonce;

                if (string.IsNullOrEmpty(timeStamp))
                {
                    timeStamp = myOAuth.GenerateTimeStamp();
                }

                if (string.IsNullOrEmpty(nonce))
                {
                    nonce = myOAuth.GenerateNonce();
                }


                myOAuth.IncludeVersion = true;

                string signature = myOAuth.GenerateSignature(uri, consumerKey, consumerSecret,
                    "", "", httpMethod, timeStamp, nonce, signatureType,
                    out normalizedUrl, out normalizedRequestParameters);

                string signatureString = myOAuth.UrlEncode(signature);
                //////////////////////////////////////////////////////////////////////////////////////////////////////////


                HttpWebRequest.Headers.Add("Authorization", "OAuth oauth_consumer_key=\"" + fasttagoauth_consumer_key + "\",oauth_signature_method=\"" + fasttagoauth_signature_method + "\",oauth_timestamp=\"" + timestamp + "\",oauth_nonce=\"" + fasttagoauth_nonce + "\",oauth_version=\"" + fasttagoauth_version + "\",oauth_signature=\"" + signatureString + "\"");
                HttpWebRequest.ContentType = "application/json";
                HttpWebRequest.Timeout = FastTagCommandTimeout;
                using (HttpWebResponse = (HttpWebResponse)HttpWebRequest.GetResponse())
                {

                   Log.Information("FastTag Request Headers :" + HttpWebRequest.Headers.ToString(), "Info");

                    using (var reader = new System.IO.StreamReader(HttpWebResponse.GetResponseStream()))
                    {
                        strProcessResponse = reader.ReadToEnd();
                    }
                }
               Log.Information("FastTag Json Response Encrypted :" + strProcessResponse, "Info");

                JObject jObject = JObject.Parse(strProcessResponse);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["ResponseData"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                decryptedResponse = AesDecrypt.AES_DECRYPT(asw, fasttagEncrypDecryptkey);

               Log.Information("FastTag Decrypted Response :" + decryptedResponse, "Info");

                JObject jObject1 = JObject.Parse(decryptedResponse);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string token = jObject1["ResponseContent"]["Token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("FastTag Token :" + token, "Info");

#pragma warning disable CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string tokenSecret = jObject1["ResponseContent"]["TokenSecret"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("FastTag TokenSecret :" + tokenSecret, "Info");

                _TokenBL.InsertToken(fasttagBillerID, token, tokenSecret, "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "FastTag Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("FastTag Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "FastTag Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetBajajFinanceToken()
        {
            try
            {

                string bajajtokenurl = _config.GetValue<string>("BajajFinance:bajajtokenurl") ?? string.Empty;
                string bajajgrant_type = _config.GetValue<string>("BajajFinance:bajajgrant_type") ?? string.Empty;
                string bajajresource = _config.GetValue<string>("BajajFinance:bajajresource") ?? string.Empty;
                string bajajclient_id = _config.GetValue<string>("BajajFinance:bajajclient_id") ?? string.Empty;
                string bajajclient_secret = _config.GetValue<string>("BajajFinance:bajajclient_secret") ?? string.Empty;
                string bajajSubscriptionKey = _config.GetValue<string>("BajajFinance:bajajSubscriptionKey") ?? string.Empty;
                string bajajBillerID = _config.GetValue<string>("BajajFinance:bajajBillerID") ?? string.Empty;
                int BajajFinanceCommandTimeout = _config.GetValue<int>("BajajFinance:BajajFinanceCommandTimeout");

               Log.Information("BajajFinance Request Starts -   Request URL :" + bajajtokenurl, "Info");


                HttpWebRequest? request = HttpWebRequest.Create(bajajtokenurl)
                            as HttpWebRequest;



#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.Timeout = BajajFinanceCommandTimeout;
                StringBuilder s = new StringBuilder();
                s.Append("grant_type=" + bajajgrant_type + "");
                s.Append("&");
                s.Append("resource=" + HttpUtility.UrlEncode(bajajresource));
                s.Append("&");
                s.Append("client_id=" + bajajclient_id + "");
                s.Append("&");
                s.Append("client_secret=" + HttpUtility.UrlEncode(bajajclient_secret));

               Log.Information("BajajFinance Token Request :" + s.ToString(), "Info");

                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {

                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
                JObject jObject = JObject.Parse(s1);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("BajajFinance Token Response :" + asw, "Info");

                _TokenBL.InsertToken(bajajBillerID, asw, "", "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("BajajFinance Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "BajajFinance Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetBajajInsuranceToken()
        {
            try
            {
                string bajajInstokenurl = _config.GetValue<string>("BajajInsurance:bajajInstokenurl") ?? string.Empty;
                string bajajInsgrant_type = _config.GetValue<string>("BajajInsurance:bajajInsgrant_type") ?? string.Empty;
                string bajajInsresource = _config.GetValue<string>("BajajInsurance:bajajInsresource") ?? string.Empty;
                string bajajInsclient_id = _config.GetValue<string>("BajajInsurance:bajajInsclient_id") ?? string.Empty;
                string bajajInsclient_secret = _config.GetValue<string>("BajajInsurance:bajajInsclient_secret") ?? string.Empty;
                string bajajInsBillerID = _config.GetValue<string>("BajajInsurance:bajajInsBillerID") ?? string.Empty;
                int BajajInsCommandTimeout = _config.GetValue<int>("BajajInsurance:BajajInsCommandTimeout");

               Log.Information("Bajaj Insurance Request Starts -   Request URL :" + bajajInstokenurl, "Info");

                HttpWebRequest? request = HttpWebRequest.Create(bajajInstokenurl)
                            as HttpWebRequest;


#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.Timeout = BajajInsCommandTimeout;
                StringBuilder s = new StringBuilder();
                s.Append("grant_type=" + bajajInsgrant_type + "");
                s.Append("&");
                s.Append("resource=" + HttpUtility.UrlEncode(bajajInsresource));
                s.Append("&");
                s.Append("client_id=" + bajajInsclient_id + "");
                s.Append("&");
                s.Append("client_secret=" + HttpUtility.UrlEncode(bajajInsclient_secret));

               Log.Information("Bajaj Insurance Token Request :" + s.ToString(), "Info");

                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
                JObject jObject = JObject.Parse(s1);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("Bajaj Insurance Token Response :" + asw, "Info");

                _TokenBL.InsertToken(bajajInsBillerID, asw, "", "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("Bajaj Insurance Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Bajaj Insurance Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetIndiaShelterToken()
        {

            try
            {

                string IndiaSheltertokenurl = _config.GetValue<string>("IndiaShelter:IndiaSheltertokenurl") ?? string.Empty;
                string IndiaSheltergrant_type = _config.GetValue<string>("IndiaShelter:IndiaSheltergrant_type") ?? string.Empty;
                string IndiaShelterclient_id = _config.GetValue<string>("IndiaShelter:IndiaShelterclient_id") ?? string.Empty;
                string IndiaShelterclient_secret = _config.GetValue<string>("IndiaShelter:IndiaShelterclient_secret") ?? string.Empty;
                string IndiaShelterusername = _config.GetValue<string>("IndiaShelter:IndiaShelterusername") ?? string.Empty;
                string IndiaShelterpassword = _config.GetValue<string>("IndiaShelter:IndiaShelterPassword") ?? string.Empty;
                string IndiaShelterBillerID = _config.GetValue<string>("IndiaShelter:IndiaShelterBillerID") ?? string.Empty;



                HttpWebRequest request = HttpWebRequest.Create(IndiaSheltertokenurl)
                            as HttpWebRequest;


               Log.Information("India Shelter Request URL :" + IndiaSheltertokenurl.ToString(), "Info");


#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                StringBuilder s = new StringBuilder();
                s.Append("grant_type=" + IndiaSheltergrant_type + "");
                s.Append("&");
                s.Append("client_id=" + IndiaShelterclient_id + "");
                s.Append("&");
                s.Append("client_secret=" + HttpUtility.UrlEncode(IndiaShelterclient_secret));
                s.Append("&");
                s.Append("username=" + IndiaShelterusername + "");
                s.Append("&");
                s.Append("password=" + IndiaShelterpassword + "");

               Log.Information("IndiaShelter Token Request :" + s.ToString(), "Info");



                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
                JObject jObject = JObject.Parse(s1);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("India Shelter Token Response :" + asw, "Info");



                _TokenBL.InsertToken(IndiaShelterBillerID, asw, "", "", CommandTimeout, _conStr);
                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("IndiaShelter Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "IndiaShelter Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetBPCLToken()
        {
            try
            {

                string BPCLtokenurl = _config.GetValue<string>("BPCL:BPCLtokenurl") ?? string.Empty;
                string BPCLsourceId = _config.GetValue<string>("BPCL:BPCLsourceId") ?? string.Empty;
                string BPCLloginId = _config.GetValue<string>("BPCL:BPCLloginId") ?? string.Empty;
                string BPCLloginPassword = _config.GetValue<string>("BPCL:BPCLloginPassword") ?? string.Empty;
                string BPCLBillerID = _config.GetValue<string>("BPCL:BPCLBillerID") ?? string.Empty;
                string asw = String.Empty;

                HttpWebRequest request = HttpWebRequest.Create(BPCLtokenurl)
                    as HttpWebRequest;

               Log.Information("BPCL Token Request URL :" + BPCLtokenurl.ToString() + "Biller ID:" + BPCLBillerID, "Info");
                string Request = "{\"sourceId\":  \"" + BPCLsourceId + "\",\"loginId\": \"" + BPCLloginId + "\",\"loginPassword\": \"" + BPCLloginPassword + "\"}";
               Log.Information("BPCL Request :" + Request.ToString(), "Info");



#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = string.Format("application/json");


                byte[] fulldata = Encoding.Default.GetBytes(Request.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
               Log.Information("BPCL Token Response :" + s1.ToString(), "Info");

                JObject jObject = JObject.Parse(s1);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                asw = jObject["token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                if (!string.IsNullOrEmpty(asw))
                {
                   Log.Information("BPCL Token Response :" + asw, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    _TokenBL.InsertToken(BPCLBillerID.Trim(), asw, "", "", CommandTimeout, _conStr);
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                }
                Thread.Sleep(ThreadSleep);
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "BPCL Exception at " + DateTime.Now.ToLongDateString());
            }

        }
        public void GetBPCLCommToken()
        {
            try
            {

                string BPCLtokenurl = _config.GetValue<string>("BPCLCommercial:BPCLCommtokenurl") ?? string.Empty;
                string BPCLsourceId = _config.GetValue<string>("BPCLCommercial:BPCLCommsourceId") ?? string.Empty;
                string BPCLloginId = _config.GetValue<string>("BPCLCommercial:BPCLCommloginId") ?? string.Empty;
                string BPCLloginPassword = _config.GetValue<string>("BPCLCommercial:BPCLCommloginPassword") ?? string.Empty;
                string BPCLBillerID = _config.GetValue<string>("BPCLCommercial:BPCLCommBillerID") ?? string.Empty;
                string asw = String.Empty;

                HttpWebRequest request = HttpWebRequest.Create(BPCLtokenurl) as HttpWebRequest;

               Log.Information("BPCL Token Request URL :" + BPCLtokenurl.ToString() + "Biller ID:" + BPCLBillerID, "Info");
                string Request = "{\"sourceId\":  \"" + BPCLsourceId + "\",\"loginId\": \"" + BPCLloginId + "\",\"loginPassword\": \"" + BPCLloginPassword + "\"}";
               Log.Information("BPCL Request :" + Request.ToString(), "Info");


#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = string.Format("application/json");


                byte[] fulldata = Encoding.Default.GetBytes(Request.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
               Log.Information("BPCL Token Response :" + s1.ToString(), "Info");

                JObject jObject = JObject.Parse(s1);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                asw = jObject["token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                if (!string.IsNullOrEmpty(asw))
                {
                   Log.Information("BPCL Token Response :" + asw, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    _TokenBL.InsertToken(BPCLBillerID.Trim(), asw, "", "", CommandTimeout, _conStr);
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                }
                Thread.Sleep(ThreadSleep);
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "BPCL Exception at " + DateTime.Now.ToLongDateString());
            }

        }
        private void GetBajajAgentCollectionToken()
        {
            try
            {
                string TokenUrl = _config.GetValue<string>("BajajAgentCollection:TokenUrl") ?? string.Empty;
                string grant_type = _config.GetValue<string>("BajajAgentCollection:grant_type") ?? string.Empty;
                string resource = _config.GetValue<string>("BajajAgentCollection:resource") ?? string.Empty;
                string ClientID = _config.GetValue<string>("BajajAgentCollection:ClientID") ?? string.Empty;
                string SecretKey = _config.GetValue<string>("BajajAgentCollection:SecretKey") ?? string.Empty;
                string BillerId = _config.GetValue<string>("BajajAgentCollection:BillerId") ?? string.Empty;
                int CommandTimeout = _config.GetValue<int>("BajajAgentCollection:CommandTimeout");

               Log.Information("Bajaj Agent Collection Request Starts -   Request URL :" + TokenUrl, "Info");

                HttpWebRequest? request = HttpWebRequest.Create(TokenUrl)
                            as HttpWebRequest;


#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.Timeout = CommandTimeout;
                StringBuilder RequestBody = new StringBuilder();
                RequestBody.Append("grant_type=" + grant_type + "");
                RequestBody.Append("&");
                RequestBody.Append("resource=" + HttpUtility.UrlEncode(resource));
                RequestBody.Append("&");
                RequestBody.Append("client_id=" + ClientID + "");
                RequestBody.Append("&");
                RequestBody.Append("client_secret=" + HttpUtility.UrlEncode(SecretKey));

               Log.Information("Bajaj Agent Collection Token Request :" + RequestBody.ToString(), "Info");

                byte[] fulldata = Encoding.Default.GetBytes(RequestBody.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }

                JObject jObject = JObject.Parse(s1);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("Bajaj Insurance Token Response :" + asw, "Info");

                _TokenBL.InsertToken(BillerId, asw, "", "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("Bajaj Insurance Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Bajaj Insurance Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetBajajAutoToken()
        {
            try
            {
                string partner_id = _config.GetValue<string>("BajajAuto:partner_id") ?? string.Empty;
                string merchant_id = _config.GetValue<string>("BajajAuto:merchant_id") ?? string.Empty;
                string vendor_username = _config.GetValue<string>("BajajAuto:vendor_username") ?? string.Empty;
                string vendor_password = _config.GetValue<string>("BajajAuto:vendor_password") ?? string.Empty;
                string auth_key = _config.GetValue<string>("BajajAuto:auth_key") ?? string.Empty;
                string req_type = _config.GetValue<string>("BajajAuto:req_type") ?? string.Empty;
                string TokenUrl = _config.GetValue<string>("BajajAuto:TokenUrl") ?? string.Empty;
                string BillerId = _config.GetValue<string>("BajajAuto:BillerId") ?? string.Empty;
                string asw = String.Empty;

                HttpWebRequest request = HttpWebRequest.Create(TokenUrl) as HttpWebRequest;

               Log.Information("Bajaj Auto Token Request URL :" + TokenUrl.ToString() + "Biller ID:" + BillerId, "Info");
                string Request = "{\"partner_id\":  \"" + partner_id + "\",\"merchant_id\": \"" + merchant_id + "\",\"vendor_username\": \"" + vendor_username + "\",\"vendor_password\": \"" + vendor_password + "\",\"auth_key\": \"" + auth_key + "\",\"req_type\": \"" + req_type + "\"}";
               Log.Information("Bajaj Auto Request :" + Request.ToString(), "Info");



#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = string.Format("application/json");


                byte[] fulldata = Encoding.Default.GetBytes(Request.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
               Log.Information("Bajaj Auto Token Response :" + s1.ToString(), "Info");

                JObject jObject = JObject.Parse(s1);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                asw = jObject["token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                if (!string.IsNullOrEmpty(asw))
                {
                   Log.Information("Bajaj Auto Token Response :" + asw, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    _TokenBL.InsertToken(BillerId.Trim(), asw, "", "", CommandTimeout, _conStr);
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                }
                Thread.Sleep(ThreadSleep);
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Bajaj Auto Exception at " + DateTime.Now.ToLongDateString());
            }

        }

        public void GetKosamattamToken()
        {
            try
            {

                string Kossatokenurl = _config.GetValue<string>("Kosamattam:Kossatokenurl") ?? string.Empty;
                string KossauserName = _config.GetValue<string>("Kosamattam:KossauserName") ?? string.Empty;
                string KossaPassword = _config.GetValue<string>("Kosamattam:KossaPassword") ?? string.Empty;
                string KossaBillerID = _config.GetValue<string>("Kosamattam:KossaBillerID") ?? string.Empty;
                int CommandTimeout = _config.GetValue<int>("Kosamattam:CommandTimeout");
                string asw = String.Empty;

                HttpWebRequest request = HttpWebRequest.Create(Kossatokenurl) as HttpWebRequest;

               Log.Information("Kossamattam Token Request URL :" + Kossatokenurl.ToString() + "Biller ID:" + KossaBillerID, "Info");
                string Request = "{\"userName\":  \"" + KossauserName + "\",\"Password\": \"" + KossaPassword + "\"}";
               Log.Information("Kossamattam Request :" + Request.ToString(), "Info");

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = string.Format("application/json");

                byte[] fulldata = Encoding.Default.GetBytes(Request.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
               Log.Information("Kossamattam Token Response :" + s1.ToString(), "Info");

                JObject jObject = JObject.Parse(s1);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                asw = jObject["tokenInfo"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                jObject = JObject.Parse(asw);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string access_Token = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string Refresh_Token = jObject["refresh_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                if (!string.IsNullOrEmpty(access_Token))
                {
                   Log.Information("Kossamattam Token Response :" + access_Token, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    _TokenBL.InsertToken(KossaBillerID.Trim(), access_Token, "", Refresh_Token, CommandTimeout, _conStr);
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                }
                Thread.Sleep(ThreadSleep);
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Kossamattam Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetBajajFinanceLtdToken()
        {
            try
            {

                string bajajtokenurl = _config.GetValue<string>("BajajFinanceLtd:bajajtokenurl") ?? string.Empty;
                string bajajgrant_type = _config.GetValue<string>("BajajFinanceLtd:bajajgrant_type") ?? string.Empty;
                string bajajresource = _config.GetValue<string>("BajajFinanceLtd:bajajresource") ?? string.Empty;
                string bajajclient_id = _config.GetValue<string>("BajajFinanceLtd:bajajclient_id") ?? string.Empty;
                string bajajclient_secret = _config.GetValue<string>("BajajFinanceLtd:bajajclient_secret") ?? string.Empty;
                string bajajSubscriptionKey = _config.GetValue<string>("BajajFinanceLtd:bajajSubscriptionKey") ?? string.Empty;
                string bajajBillerID = _config.GetValue<string>("BajajFinanceLtd:bajajBillerID") ?? string.Empty;
                int BajajFinanceCommandTimeout = _config.GetValue<int>("BajajFinanceLtd:BajajFinanceCommandTimeout");

               Log.Information("BajajFinanceLtd Request Starts -   Request URL :" + bajajtokenurl, "Info");

                HttpWebRequest? request = HttpWebRequest.Create(bajajtokenurl)
                            as HttpWebRequest;

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.Timeout = BajajFinanceCommandTimeout;
                StringBuilder s = new StringBuilder();
                s.Append("grant_type=" + bajajgrant_type + "");
                s.Append("&");
                s.Append("resource=" + HttpUtility.UrlEncode(bajajresource));
                s.Append("&");
                s.Append("client_id=" + bajajclient_id + "");
                s.Append("&");
                s.Append("client_secret=" + HttpUtility.UrlEncode(bajajclient_secret));

               Log.Information("BajajFinanceLtd Token Request :" + s.ToString(), "Info");

                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {

                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
                JObject jObject = JObject.Parse(s1);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("BajajFinanceLtd Token Response :" + asw, "Info");

                _TokenBL.InsertToken(bajajBillerID, asw, "", "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("BajajFinanceLtd Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "BajajFinanceLtd Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetBajajAutoCreditToken()
        {
            try
            {
                string partner_id = _config.GetValue<string>("BajajAutoCredit:partner_id") ?? string.Empty;
                string merchant_id = _config.GetValue<string>("BajajAutoCredit:merchant_id") ?? string.Empty;
                string vendor_username = _config.GetValue<string>("BajajAutoCredit:vendor_username") ?? string.Empty;
                string vendor_password = _config.GetValue<string>("BajajAutoCredit:vendor_password") ?? string.Empty;
                string auth_key = _config.GetValue<string>("BajajAutoCredit:auth_key") ?? string.Empty;
                string req_type = _config.GetValue<string>("BajajAutoCredit:req_type") ?? string.Empty;
                string TokenUrl = _config.GetValue<string>("BajajAutoCredit:TokenUrl") ?? string.Empty;
                string BillerId = _config.GetValue<string>("BajajAutoCredit:BillerId") ?? string.Empty;
                string asw = String.Empty;

                HttpWebRequest request = HttpWebRequest.Create(TokenUrl) as HttpWebRequest;

                ServicePointManager.ServerCertificateValidationCallback = ValidateServerCertificate;

               Log.Information("Bajaj Auto Credit Token Request URL :" + TokenUrl.ToString() + "Biller ID:" + BillerId, "Info");
                string Request = "{\"partner_id\":  \"" + partner_id + "\",\"merchant_id\": \"" + merchant_id + "\",\"vendor_username\": \"" + vendor_username + "\",\"vendor_password\": \"" + vendor_password + "\",\"auth_key\": \"" + auth_key + "\",\"req_type\": \"" + req_type + "\"}";
               Log.Information("Bajaj Auto Credit Request :" + Request.ToString(), "Info");

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = string.Format("application/json");


                byte[] fulldata = Encoding.Default.GetBytes(Request.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
               Log.Information("Bajaj Auto Credit Token Response :" + s1.ToString(), "Info");

                JObject jObject = JObject.Parse(s1);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                asw = jObject["token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.

                if (!string.IsNullOrEmpty(asw))
                {
                   Log.Information("Bajaj Auto Credit Token Response :" + asw, "Info");
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                    _TokenBL.InsertToken(BillerId.Trim(), asw, "", "", CommandTimeout, _conStr);
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                }
                Thread.Sleep(ThreadSleep);
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "Bajaj Auto Credit Exception at " + DateTime.Now.ToLongDateString());
            }
        }
        public void GetAuxiloFinserveToken()
        {
            try
            {
                string Auxilotokenurl = _config.GetValue<string>("AuxiloFinserve:Auxilotokenurl") ?? string.Empty;
                string Auxilogrant_type = _config.GetValue<string>("AuxiloFinserve:Auxilogrant_type") ?? string.Empty;
                string Auxiloclient_id = _config.GetValue<string>("AuxiloFinserve:Auxiloclient_id") ?? string.Empty;
                string Auxiloscope = _config.GetValue<string>("AuxiloFinserve:Auxiloscope") ?? string.Empty;
                string AuxiloBasicAuth = _config.GetValue<string>("AuxiloFinserve:AuxiloBasicAuth") ?? string.Empty;
                string AuxiloBillerID = _config.GetValue<string>("AuxiloFinserve:AuxiloBillerID") ?? string.Empty;
                int AuxiloFinanceCommandTimeout = _config.GetValue<int>("AuxiloFinserve:AuxiloFinanceCommandTimeout");

               Log.Information("AuxiloFinserve Request Starts -   Request URL :" + Auxilotokenurl, "Info");

                HttpWebRequest? request = HttpWebRequest.Create(Auxilotokenurl)
                            as HttpWebRequest;

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.Timeout = AuxiloFinanceCommandTimeout;
                request.Headers.Add("Authorization", "Basic " + AuxiloBasicAuth);

                StringBuilder s = new StringBuilder();
                s.Append("grant_type=" + Auxilogrant_type + "");
                s.Append("&");
                s.Append("client_id=" + Auxiloclient_id + "");
                s.Append("&");
                s.Append("scope=" + Auxiloscope + "");

               Log.Information("AuxiloFinserve Token Request :" + s.ToString(), "Info");

                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {

                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }
                JObject jObject = JObject.Parse(s1);

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                string asw = jObject["access_token"].ToString();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
               Log.Information("AuxiloFinserve Token Response :" + asw, "Info");

                _TokenBL.InsertToken(AuxiloBillerID, asw, "", "", CommandTimeout, _conStr);

                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("BajajFinanceLtd Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "BajajFinanceLtd Exception at " + DateTime.Now.ToLongDateString());
            }
        }

        private void GetTataMotorFinanceToken()
        {
            try
            {
                string tokenurl = _config.GetValue<string>("TataMotor:tokenurl") ?? string.Empty;
                string client_id = _config.GetValue<string>("TataMotor:client_id") ?? string.Empty;
                string client_value = _config.GetValue<string>("TataMotor:client_value") ?? string.Empty;
                string secret_id = _config.GetValue<string>("TataMotor:secret_id") ?? string.Empty;
                string secret_value = _config.GetValue<string>("TataMotor:secret_value") ?? string.Empty;
                string BillerID = _config.GetValue<string>("TataMotor:BillerID") ?? string.Empty;
                int CommandTimeout = _config.GetValue<int>("TataMotor:CommandTimeout");

               Log.Information("TataMotor Request Starts -   Request URL :" + tokenurl, "Info");

                HttpWebRequest? request = HttpWebRequest.Create(tokenurl)
                            as HttpWebRequest;

#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.PreAuthenticate = true;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                request.Timeout = CommandTimeout;
                StringBuilder s = new StringBuilder();
                s.Append("client_id=" + client_value + "");
                s.Append("&");
                s.Append("secret_id=" + secret_value);

               Log.Information("TataMotor Token Request :" + s.ToString(), "Info");

                byte[] fulldata = Encoding.Default.GetBytes(s.ToString());
                request.ContentLength = fulldata.Length;
                using (Stream sw = request.GetRequestStream())
                {
                    sw.Write(fulldata, 0, fulldata.Length);
                }
                string s1 = "";
                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
                {
                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                    {
                        s1 = sr.ReadToEnd();
                    }
                }

                string asw = s1.ToString();
               Log.Information("TataMotor Token Response :" + asw, "Info");
                _TokenBL.InsertToken(BillerID, asw, "", "", CommandTimeout, _conStr);
                Thread.Sleep(ThreadSleep);
            }
            catch (WebException ex)
            {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                var resp = new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                Log.Error(Convert.ToString(ex) + "Exception at " + DateTime.Now.ToLongDateString());
               Log.Information("TataMotor Token Exception Response :" + resp, "Info");
            }
            catch (Exception ex)
            {
                Log.Error(Convert.ToString(ex) + "TataMotor Exception at " + DateTime.Now.ToLongDateString());
            }
        }
